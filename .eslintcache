[{"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\index.jsx":"1","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\reportWebVitals.js":"2","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\App.jsx":"3","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Main.jsx":"4","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Footer.jsx":"5","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Login.jsx":"6","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\NewPlaylist.jsx":"7","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\EditPlaylist.jsx":"8","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Navbar.jsx":"9","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\helpers\\environment.js":"10","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Routes.jsx":"11","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\styles\\MuiTheme.jsx":"12","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\results\\NewPlaylistTable.jsx":"13","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\AddPlaylistDetails.jsx":"14","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\EditPlaylistMusic.jsx":"15"},{"size":500,"mtime":1606852774261,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":2306,"mtime":1607446269743,"results":"19","hashOfConfig":"17"},{"size":5083,"mtime":1612033519505,"results":"20","hashOfConfig":"17"},{"size":561,"mtime":1609561861625,"results":"21","hashOfConfig":"17"},{"size":10319,"mtime":1607403137944,"results":"22","hashOfConfig":"17"},{"size":4781,"mtime":1607404877518,"results":"23","hashOfConfig":"17"},{"size":14392,"mtime":1612033553318,"results":"24","hashOfConfig":"17"},{"size":4271,"mtime":1612033537315,"results":"25","hashOfConfig":"17"},{"size":312,"mtime":1607397723015,"results":"26","hashOfConfig":"17"},{"size":669,"mtime":1607386332322,"results":"27","hashOfConfig":"17"},{"size":306,"mtime":1612033378275,"results":"28","hashOfConfig":"17"},{"size":490,"mtime":1606924172298,"results":"29","hashOfConfig":"17"},{"size":3835,"mtime":1612033412747,"results":"30","hashOfConfig":"17"},{"size":6168,"mtime":1612033451871,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"yfyjv9",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\index.jsx",[],["69","70"],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\reportWebVitals.js",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\App.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Main.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Footer.jsx",["71"],"import React from 'react';\r\nimport 'animate.css';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid InUpcontainer justify='center' style={{ backgroundColor: '#191414' }}>\r\n                <Grid item className=\"animate__animated animate__back\">\r\n                    <p>&#169; {(new Date().getFullYear())} - Chris Rumler</p>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Login.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\NewPlaylist.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\EditPlaylist.jsx",["72","73"],"import React, { Component } from 'react';\r\nimport 'animate.css';\r\nimport APIURL from '../../helpers/environment';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport theme from '../../styles/MuiTheme';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport QueueIcon from '@material-ui/icons/Queue';\r\nimport EditPlaylistMusic from './EditPlaylistMusic';\r\n// import Table from '@material-ui/core/Table';\r\n// import TableBody from '@material-ui/core/TableBody';\r\n// import TableCell from '@material-ui/core/TableCell';\r\n// import TableContainer from '@material-ui/core/TableContainer';\r\n// import TableHead from '@material-ui/core/TableHead';\r\n// import TableRow from '@material-ui/core/TableRow';\r\n// import Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    table: {\r\n        minWidth: 650,\r\n      },\r\n    root: {\r\n        selected: {\r\n            color: \"red\"\r\n        },\r\n        flexGrow: 1,\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '100em',\r\n            maxWidth: 752\r\n        },\r\n        control: {\r\n            padding: theme.spacing(2)\r\n        },\r\n        button: {\r\n            primary: \"#1DB954\"\r\n        },\r\n        listAllPlaylists: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            overflow: \"auto\",\r\n            maxHeight: \"10\"\r\n        },\r\n        title: {\r\n            margin: theme.spacing(4, 0, 2)\r\n        },\r\n        selected: {\r\n            color: \"white\"\r\n        }\r\n    },\r\n    typography: {\r\n        // padding: theme.spacing(5),\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    }\r\n\r\n});\r\n\r\n// Using MUI Table to map out existing playlist info\r\n\r\n// function createData(artist, song, album) {\r\n//     return { artist, song, album };\r\n//   };\r\n\r\n// const rows = [\r\n\r\n// ];\r\n\r\nconst primaryText = {\r\n    color: \"#1DB954\",\r\n    fontSize: \"18px\"\r\n};\r\n\r\nconst secondaryText = {\r\n    color: \"white\",\r\n    fontSize: \"12px\"\r\n};\r\n\r\nfunction generate(element) {\r\n    return [0].map((value) =>\r\n        React.cloneElement(element, {\r\n            key: value\r\n        }),\r\n    );\r\n};\r\n\r\n\r\nclass EditPlaylistDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            artist: '',\r\n            album: '',\r\n            song: '',\r\n            playlistId: '',\r\n            playlistName: '',\r\n            description: '',\r\n            playlistData: [],\r\n            allPlaylists: [],\r\n            playlistSongData: [],\r\n            open: false,\r\n            secondary: false\r\n        }\r\n\r\n        this.handlePlaylistDelete = this.handlePlaylistDelete.bind(this)\r\n        this.handlePlaylistEdit = this.handlePlaylistEdit.bind(this)\r\n        this.handleClickOpen = this.handleClickOpen.bind(this)\r\n        this.handleClose = this.handleClose.bind(this)\r\n\r\n    };\r\n\r\n    handleSecondary = () => {\r\n        this.setState({ secondary: true });\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(`${APIURL}/playlist/`, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.props.sessionToken\r\n            })\r\n        }).then((response) => response.json())\r\n            .then((res) => {\r\n                return res;\r\n            }).then((res) => {\r\n                this.setState({\r\n                    allPlaylists: res,\r\n                    playlistData: res\r\n                })\r\n\r\n            })\r\n            .catch((err) => { console.log(err) })\r\n    };\r\n\r\n    handlePlaylistDelete(playlistDeleteId, userId) {\r\n        fetch(`${APIURL}/playlist/delete/${playlistDeleteId}`, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify({\r\n                playlist: {\r\n                    playlistId: this.props.playlistIdProp,\r\n                    playlistName: this.state.playlistName,\r\n                    description: this.state.description\r\n                }\r\n            }),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.props.sessionToken\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(window.location.reload())\r\n            .catch(err => console.log(err))\r\n    };\r\n\r\n    handlePlaylistEdit() {\r\n        fetch(`${APIURL}/playlist/update/${this.state.playlistId}`, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                playlist: {\r\n                    playlistId: this.props.playlistIdProp,\r\n                    playlistName: this.state.playlistName,\r\n                    description: this.state.description\r\n                }\r\n            }),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.props.sessionToken\r\n            })\r\n        }).then(\r\n            (response) => response.json()\r\n        );\r\n    };\r\n\r\n    handleClickOpen(playlistID) {\r\n        this.setState({ open: true, playlistId: playlistID })\r\n    };\r\n\r\n    handleClose() {\r\n        this.setState({ open: false })\r\n        window.location.reload()\r\n    };\r\n\r\n    handlePopoverClick(event) {\r\n        this.setState({ anchorEl: event.currentTarget })\r\n    };\r\n\r\n    handlePopoverClose() {\r\n        this.setState({ anchorEl: null })\r\n    };\r\n\r\n    handleViewOpen = event => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleViewClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    openPlaylistSongs() {\r\n\r\n        fetch(`${APIURL}/playlistsong/`, {\r\n            method: 'GET',\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.props.sessionToken\r\n            })\r\n        }).then((response) => response.json())\r\n            .then((res) => {\r\n                return res;\r\n            }).then((res) => {\r\n                this.setState({\r\n                    playlistSongData: res\r\n                })\r\n\r\n            })\r\n            .catch((err) => { console.log(err) })\r\n\r\n\r\n        return this.state.playlistSongData.map((song) => {\r\n            return (\r\n                <Grid item xs={12}>\r\n                    <li className=\"animate__animated animate__zoomIn\" key={song.artist}>\r\n                        <p className=\"liveList\">Artist:</p> {song.artist}\r\n                        <br />\r\n                        <p className=\"liveList\">Album:</p> {song.album}\r\n                        <br />\r\n                        <p className=\"liveList\">Song:</p> {song.song}\r\n                        <br />\r\n                    </li>\r\n                </Grid>\r\n            )\r\n        })\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <ThemeProvider theme={theme}>\r\n                <div style={{ width: '100%', marginTop: '80px' }}>\r\n\r\n                    <h1>View / Edit Your Created Playlists:</h1>\r\n\r\n                    <Grid container direction=\"column\" alignContent=\"center\" spacing={2} className={this.props.classes.root}>\r\n                        <Grid item xs={12} md={6} className=\"animate__animated animate__zoomIn\">\r\n                            <div style={{ textAlign: \"-webkit-center\", maxHeight: 400, overflow: 'auto' }}>\r\n                                {this.state.allPlaylists.map((allPlaylistsCreated, index) => {\r\n                                    const { classes } = this.props;\r\n                                    return (\r\n                                        <Grid key={index} item xs={12} md={6} style={{ maxHeight: '100px', overflow: 'auto', textAlign: \"center\" }}>\r\n                                            <div className={classes.listAllPlaylists}>\r\n                                                <List>\r\n                                                    {generate(\r\n                                                        <ListItem>\r\n                                                            <ListItemAvatar>\r\n                                                                <Avatar>\r\n                                                                    <QueueMusicIcon key={index} style={{ color: \"#191414\", backgroundColor: \"#1DB954\" }} />\r\n                                                                </Avatar>\r\n                                                            </ListItemAvatar>\r\n                                                            <ListItemText\r\n                                                                primaryTypographyProps={{style: primaryText}}\r\n                                                                secondaryTypographyProps={{ style: secondaryText}}\r\n                                                                key={index}\r\n                                                                classes={{text: classes.selected}}\r\n                                                                primary={allPlaylistsCreated.playlistName}\r\n                                                                secondary={allPlaylistsCreated.description}\r\n                                                            />\r\n                                                            <ListItemSecondaryAction>\r\n                                                                <IconButton edge=\"start\" aria-label=\"edit\">\r\n                                                                    <QueueIcon key={index} style={{ color: \"#1DB954\" }} onClick={this.openPlaylistSongs()} />\r\n                                                                </IconButton>\r\n                                                                <IconButton aria-label=\"edit\">\r\n                                                                    <EditIcon key={index} style={{ color: \"#1DB954\" }} onClick={() => this.handleClickOpen(allPlaylistsCreated.id)} />\r\n                                                                </IconButton>\r\n                                                                <IconButton edge=\"end\" aria-label=\"delete\">\r\n                                                                    <DeleteIcon key={index} style={{ color: \"red\" }} onClick={() => this.handlePlaylistDelete(allPlaylistsCreated.id, allPlaylistsCreated.userId)} />\r\n                                                                </IconButton>\r\n                                                            </ListItemSecondaryAction>\r\n                                                        </ListItem>\r\n                                                    )}\r\n                                                </List>\r\n                                            </div>\r\n                                        </Grid>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <form onSubmit={this.handlePlaylistEdit(this.playlistUpdateId)}>\r\n                        <Dialog open={this.state.open === true} onClose={this.handleClose}>\r\n                            <DialogTitle>Update Playlist Details:</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    You may update your playlist information below:\r\n                                </DialogContentText>\r\n                                <TextField\r\n                                    margin='dense'\r\n                                    id='playlistName'\r\n                                    label='Playlist Name:'\r\n                                    fullWidth\r\n                                    onChange={(e) => this.setState({ playlistName: e.target.value })}\r\n                                    value={this.state.playlistName}\r\n                                    required\r\n                                />\r\n                                <br />\r\n                                <TextField\r\n                                    margin='dense'\r\n                                    id='description'\r\n                                    label='Description:'\r\n                                    fullWidth\r\n                                    onChange={(e) => this.setState({ description: e.target.value })}\r\n                                    value={this.state.description}\r\n                                />\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={this.handleClose} type=\"submit\" color='primary'>\r\n                                    Cancel\r\n                                    </Button>\r\n                                <Button onClick={this.handleClose} type=\"submit\" color='primary'>\r\n                                    Update Playlist\r\n                                    </Button>\r\n                            </DialogActions>\r\n                        </Dialog>\r\n                    </form>\r\n                </div>\r\n            </ThemeProvider >\r\n        )\r\n    }\r\n};\r\n\r\nconst EditPlaylistMusicWrapped = withStyles(styles)(EditPlaylistMusic);\r\n\r\nexport default withStyles(styles, { withTheme: true })(EditPlaylistDetails);","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Navbar.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\helpers\\environment.js",["74"],"let APIURL = '';\r\n\r\nswitch (window.location.hostname) {\r\n    case 'localhost' || '127.0.0.1':\r\n\r\n        APIURL = 'http://localhost:5040';\r\n        break;\r\n\r\n    case 'cgr-spotify-playlist-client.herokuapp.com':\r\n\r\n        APIURL = 'https://cgr-spotify-playlist-server.herokuapp.com'\r\n}\r\n\r\nexport default APIURL;","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\Routes.jsx",["75"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Link, Route } from 'react-router-dom';\r\nimport NewPlaylist from './NewPlaylist';\r\nimport Main from './Main';\r\nimport EditPlaylist from './EditPlaylist';\r\n\r\nclass Routes extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\"><Main /></Route>\r\n                    <Route exact path=\"/newplaylist\"><NewPlaylist /></Route>\r\n                    <Route exact path=\"/editplaylist\"><EditPlaylist /></Route>\r\n                </Switch>\r\n            </Router>\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default Routes;",["76","77"],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\styles\\MuiTheme.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\results\\NewPlaylistTable.jsx",[],"C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\AddPlaylistDetails.jsx",["78"],"import React, { Component } from 'react';\r\nimport 'animate.css';\r\nimport APIURL from '../../helpers/environment';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nclass AddPlaylistDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            artist: '',\r\n            album: '',\r\n            song: '',\r\n            playlistData: []\r\n        }\r\n    };\r\n\r\n    handleSongSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetch(`${APIURL}/playlistsong/create`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                playlistsong: {\r\n                    playlistId: this.props.playlistIdProp,\r\n                    artist: this.state.artist,\r\n                    album: this.state.album,\r\n                    song: this.state.song\r\n                }\r\n            }),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json',\r\n                'Authorization': this.props.sessionToken\r\n            })\r\n        }).then(\r\n            (response) => response.json()\r\n            //below is the code for mapping live playlist details\r\n        ).then((playlistData) => {\r\n            this.setState({\r\n                playlistData: playlistData,\r\n                playlistData: [...this.state.playlistData, { artist: this.state.artist, album: this.state.album, song: this.state.song }]\r\n            });\r\n        });\r\n    };\r\n\r\n    displayLivePlaylistData() {\r\n\r\n        return this.state.playlistData.map((song) => {\r\n            return (\r\n\r\n                <Grid item xs={12}>\r\n                    <li className=\"animate__animated animate__zoomIn\" key={song.artist}>\r\n                        <p className=\"liveList\">Artist:</p> {song.artist}\r\n                        <br />\r\n                        <p className=\"liveList\">Album:</p> {song.album}\r\n                        <br />\r\n                        <p className=\"liveList\">Song:</p> {song.song}\r\n                        <br />\r\n                    </li>\r\n                </Grid>\r\n            )\r\n        })\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Grid container direction=\"column\" className={this.props.classes.root} spacing={4} alignContent=\"center\">\r\n                <div className=\"animate__animated animate__zoomIn\">\r\n                    <form onSubmit={this.handleSongSubmit} className={this.props.classes.root} noValidate autoComplete=\"off\" style={{ marginTop: '2rem' }}>\r\n                        <TextField size=\"small\" id=\"outlined-basic standard-size-small\" label=\"Artist / Band\" variant=\"filled\" style={{ backgroundColor: 'white', color: 'white', borderRadius: '10px' }} onChange={(e) => this.setState({ artist: e.target.value })} value={this.state.artist} />\r\n\r\n                        <TextField size=\"small\" id=\"outlined-basic standard-size-small\" label=\"Album\" variant=\"filled\" style={{ backgroundColor: 'white', color: 'white', borderRadius: '10px' }} onChange={(e) => this.setState({ album: e.target.value })} value={this.state.album} />\r\n\r\n                        <TextField size=\"small\" id=\"outlined-basic standard-size-small\" label=\"Song\" variant=\"filled\" style={{ backgroundColor: 'white', color: 'white', borderRadius: '10px' }} onChange={(e) => this.setState({ song: e.target.value })} value={this.state.song} />\r\n                        <br />\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">Add Info to Playlist</Button>\r\n                    </form>\r\n                    <br />\r\n                    <ol>\r\n                        {this.displayLivePlaylistData()}\r\n                    </ol>\r\n\r\n\r\n                </div>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddPlaylistDetails;","C:\\Users\\cgrum\\Desktop\\wd64-Sept2020\\Projects\\spotify-playlist\\client\\src\\components\\site\\EditPlaylistMusic.jsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":6,"column":5,"nodeType":"85","messageId":"86","endLine":8,"endColumn":6},{"ruleId":"87","severity":1,"message":"88","line":65,"column":9,"nodeType":"89","messageId":"90","endLine":65,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":358,"column":7,"nodeType":"93","messageId":"94","endLine":358,"endColumn":31},{"ruleId":"95","severity":1,"message":"96","line":3,"column":1,"nodeType":"97","messageId":"98","endLine":12,"endColumn":2},{"ruleId":"91","severity":1,"message":"99","line":2,"column":43,"nodeType":"93","messageId":"94","endLine":2,"endColumn":47},{"ruleId":"79","replacedBy":"100"},{"ruleId":"81","replacedBy":"101"},{"ruleId":"87","severity":1,"message":"102","line":43,"column":17,"nodeType":"89","messageId":"90","endLine":43,"endColumn":29},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-dupe-keys","Duplicate key 'selected'.","ObjectExpression","unexpected","no-unused-vars","'EditPlaylistMusicWrapped' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Link' is defined but never used.",["103"],["104"],"Duplicate key 'playlistData'.","no-global-assign","no-unsafe-negation"]